// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: image.proto

#ifndef PROTOBUF_INCLUDED_image_2eproto
#define PROTOBUF_INCLUDED_image_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_image_2eproto 

namespace protobuf_image_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_image_2eproto
namespace ImageProto {
class ImageRequest;
class ImageRequestDefaultTypeInternal;
extern ImageRequestDefaultTypeInternal _ImageRequest_default_instance_;
class ImageResponse;
class ImageResponseDefaultTypeInternal;
extern ImageResponseDefaultTypeInternal _ImageResponse_default_instance_;
}  // namespace ImageProto
namespace google {
namespace protobuf {
template<> ::ImageProto::ImageRequest* Arena::CreateMaybeMessage<::ImageProto::ImageRequest>(Arena*);
template<> ::ImageProto::ImageResponse* Arena::CreateMaybeMessage<::ImageProto::ImageResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace ImageProto {

enum ImageResponse_EnumResponse {
  ImageResponse_EnumResponse_RESPONSE_UNSPECIFIED = 0,
  ImageResponse_EnumResponse_RESPONSE_OK = 1,
  ImageResponse_EnumResponse_RESPONSE_CAMERA_NOT_FOUND = 2,
  ImageResponse_EnumResponse_RESPONSE_ERROR = 3,
  ImageResponse_EnumResponse_ImageResponse_EnumResponse_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ImageResponse_EnumResponse_ImageResponse_EnumResponse_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ImageResponse_EnumResponse_IsValid(int value);
const ImageResponse_EnumResponse ImageResponse_EnumResponse_EnumResponse_MIN = ImageResponse_EnumResponse_RESPONSE_UNSPECIFIED;
const ImageResponse_EnumResponse ImageResponse_EnumResponse_EnumResponse_MAX = ImageResponse_EnumResponse_RESPONSE_ERROR;
const int ImageResponse_EnumResponse_EnumResponse_ARRAYSIZE = ImageResponse_EnumResponse_EnumResponse_MAX + 1;

const ::google::protobuf::EnumDescriptor* ImageResponse_EnumResponse_descriptor();
inline const ::std::string& ImageResponse_EnumResponse_Name(ImageResponse_EnumResponse value) {
  return ::google::protobuf::internal::NameOfEnum(
    ImageResponse_EnumResponse_descriptor(), value);
}
inline bool ImageResponse_EnumResponse_Parse(
    const ::std::string& name, ImageResponse_EnumResponse* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ImageResponse_EnumResponse>(
    ImageResponse_EnumResponse_descriptor(), name, value);
}
// ===================================================================

class ImageRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ImageProto.ImageRequest) */ {
 public:
  ImageRequest();
  virtual ~ImageRequest();

  ImageRequest(const ImageRequest& from);

  inline ImageRequest& operator=(const ImageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ImageRequest(ImageRequest&& from) noexcept
    : ImageRequest() {
    *this = ::std::move(from);
  }

  inline ImageRequest& operator=(ImageRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ImageRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ImageRequest* internal_default_instance() {
    return reinterpret_cast<const ImageRequest*>(
               &_ImageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ImageRequest* other);
  friend void swap(ImageRequest& a, ImageRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ImageRequest* New() const final {
    return CreateMaybeMessage<ImageRequest>(NULL);
  }

  ImageRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ImageRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ImageRequest& from);
  void MergeFrom(const ImageRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ImageProto.ImageRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_image_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ImageResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ImageProto.ImageResponse) */ {
 public:
  ImageResponse();
  virtual ~ImageResponse();

  ImageResponse(const ImageResponse& from);

  inline ImageResponse& operator=(const ImageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ImageResponse(ImageResponse&& from) noexcept
    : ImageResponse() {
    *this = ::std::move(from);
  }

  inline ImageResponse& operator=(ImageResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ImageResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ImageResponse* internal_default_instance() {
    return reinterpret_cast<const ImageResponse*>(
               &_ImageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ImageResponse* other);
  friend void swap(ImageResponse& a, ImageResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ImageResponse* New() const final {
    return CreateMaybeMessage<ImageResponse>(NULL);
  }

  ImageResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ImageResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ImageResponse& from);
  void MergeFrom(const ImageResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ImageResponse_EnumResponse EnumResponse;
  static const EnumResponse RESPONSE_UNSPECIFIED =
    ImageResponse_EnumResponse_RESPONSE_UNSPECIFIED;
  static const EnumResponse RESPONSE_OK =
    ImageResponse_EnumResponse_RESPONSE_OK;
  static const EnumResponse RESPONSE_CAMERA_NOT_FOUND =
    ImageResponse_EnumResponse_RESPONSE_CAMERA_NOT_FOUND;
  static const EnumResponse RESPONSE_ERROR =
    ImageResponse_EnumResponse_RESPONSE_ERROR;
  static inline bool EnumResponse_IsValid(int value) {
    return ImageResponse_EnumResponse_IsValid(value);
  }
  static const EnumResponse EnumResponse_MIN =
    ImageResponse_EnumResponse_EnumResponse_MIN;
  static const EnumResponse EnumResponse_MAX =
    ImageResponse_EnumResponse_EnumResponse_MAX;
  static const int EnumResponse_ARRAYSIZE =
    ImageResponse_EnumResponse_EnumResponse_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EnumResponse_descriptor() {
    return ImageResponse_EnumResponse_descriptor();
  }
  static inline const ::std::string& EnumResponse_Name(EnumResponse value) {
    return ImageResponse_EnumResponse_Name(value);
  }
  static inline bool EnumResponse_Parse(const ::std::string& name,
      EnumResponse* value) {
    return ImageResponse_EnumResponse_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // bytes data = 2;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // .ImageProto.ImageResponse.EnumResponse restype = 1;
  void clear_restype();
  static const int kRestypeFieldNumber = 1;
  ::ImageProto::ImageResponse_EnumResponse restype() const;
  void set_restype(::ImageProto::ImageResponse_EnumResponse value);

  // @@protoc_insertion_point(class_scope:ImageProto.ImageResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  int restype_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_image_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ImageRequest

// -------------------------------------------------------------------

// ImageResponse

// .ImageProto.ImageResponse.EnumResponse restype = 1;
inline void ImageResponse::clear_restype() {
  restype_ = 0;
}
inline ::ImageProto::ImageResponse_EnumResponse ImageResponse::restype() const {
  // @@protoc_insertion_point(field_get:ImageProto.ImageResponse.restype)
  return static_cast< ::ImageProto::ImageResponse_EnumResponse >(restype_);
}
inline void ImageResponse::set_restype(::ImageProto::ImageResponse_EnumResponse value) {
  
  restype_ = value;
  // @@protoc_insertion_point(field_set:ImageProto.ImageResponse.restype)
}

// bytes data = 2;
inline void ImageResponse::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ImageResponse::data() const {
  // @@protoc_insertion_point(field_get:ImageProto.ImageResponse.data)
  return data_.GetNoArena();
}
inline void ImageResponse::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ImageProto.ImageResponse.data)
}
#if LANG_CXX11
inline void ImageResponse::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ImageProto.ImageResponse.data)
}
#endif
inline void ImageResponse::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ImageProto.ImageResponse.data)
}
inline void ImageResponse::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ImageProto.ImageResponse.data)
}
inline ::std::string* ImageResponse::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:ImageProto.ImageResponse.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImageResponse::release_data() {
  // @@protoc_insertion_point(field_release:ImageProto.ImageResponse.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageResponse::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:ImageProto.ImageResponse.data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ImageProto

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ImageProto::ImageResponse_EnumResponse> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ImageProto::ImageResponse_EnumResponse>() {
  return ::ImageProto::ImageResponse_EnumResponse_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_image_2eproto
